# advanced.yaml - Advanced executor features
# Usage: ry examples/advanced.yaml <command> [args...]

match:
  analyze:
    # Complex pipeline for code analysis
    pipeline:
      - shell: find . -name "*.py" -type f 2>/dev/null | head -20
      
      - python:
          stdin_mode: lines
          imports: [ast, pathlib]
          script: |
            import sys
            
            for file_path in stdin_lines:
              file_path = file_path.strip()
              if not file_path:
                  continue
              
              try:
                  code = pathlib.Path(file_path).read_text()
                  tree = ast.parse(code)
                  
                  # Count elements
                  classes = sum(1 for _ in ast.walk(tree) 
                               if isinstance(_, ast.ClassDef))
                  functions = sum(1 for _ in ast.walk(tree) 
                                 if isinstance(_, ast.FunctionDef))
                  
                  print(f"{file_path}:{classes}:{functions}")
              except:
                  pass
      
      - python: |
          # Summarize results
          import sys
          
          total_classes = 0
          total_functions = 0
          file_count = 0
          
          for line in sys.stdin:
              parts = line.strip().split(':')
              if len(parts) >= 3:
                  file_count += 1
                  total_classes += int(parts[1])
                  total_functions += int(parts[2])
          
          print(f"\nCode Analysis Summary:")
          print(f"  Files analyzed: {file_count}")
          print(f"  Total classes: {total_classes}")
          print(f"  Total functions: {total_functions}")
          if file_count > 0:
              print(f"  Avg classes/file: {total_classes/file_count:.1f}")
              print(f"  Avg functions/file: {total_functions/file_count:.1f}")

  validate:
    steps:
      - python:
          validate: true
          script: |
            # This will be validated before execution
            import json
            import yaml
            
            config_file = "{args.1|config.yaml}"
            print(f"Validating {config_file}...")
            
            # Syntax check happens at compile time
            data = {"status": "valid", "file": config_file}
            print(json.dumps(data))

  process:
    # Process data with error handling
    steps:
      - shell: |
          # Generate some test data
          echo '{"name": "test", "value": 42}'
      
      - python:
          pipe: true
          imports: [json, sys]
          script: |
            try:
                data = json.loads(sys.stdin.read())
                data['processed'] = True
                data['value'] *= 2
                print(json.dumps(data))
            except json.JSONDecodeError as e:
                print(f'{{"error": "Invalid JSON: {e}"}}')
                sys.exit(1)
      
      - python:
          stdout_mode: json
          script: |
            import sys
            import json
            
            # Read the processed data
            data = json.loads(sys.stdin.read())
            
            # Add final transformations
            data['timestamp'] = __import__('datetime').datetime.now().isoformat()
            data['status'] = 'complete'
            
            # Output is automatically JSON formatted
            print(json.dumps(data, indent=2))

  monitor:
    # Demonstrate stdin/stdout control
    steps:
      - python:
          script: |
            import subprocess
            import json
            
            # Run a command and capture output
            result = subprocess.run(['date'], capture_output=True, text=True)
            
            output = {
                "command": "date",
                "output": result.stdout.strip(),
                "status": "success" if result.returncode == 0 else "failed"
            }
            
            print(json.dumps(output))
      
      - python:
          stdin_mode: json
          script: |
            # Read previous JSON output
            import sys
            import json
            
            data = json.loads(sys.stdin.read())
            print(f"Command '{data['command']}' executed at: {data['output']}")
            print(f"Status: {data['status']}")

  default:
    - shell: |
        echo "Advanced ry examples"
        echo ""
        echo "Usage: ry examples/advanced.yaml <command>"
        echo ""
        echo "Commands:"
        echo "  analyze  - Analyze Python code structure"
        echo "  validate - Validate configuration"
        echo "  process  - Process JSON data through pipeline"
        echo "  monitor  - Monitor command execution"