version: "2.0"
name: changelog
type: utility
description: Simple changelog initialization and release management

workflows:
  - "ry changelog init                   # Create CHANGELOG.md"
  - "ry changelog show --unreleased      # View pending changes"
  - "ry changelog release 1.0.0          # Convert Unreleased to version"
  - "ry changelog validate               # Check format"

commands:
  init:
    description: Initialize a new CHANGELOG.md
    flags:
      name:
        type: string
        description: Optional project name for the title
    
    execute:
      - python: |
          from changelog_core import init_changelog
          
          success = init_changelog(flags.get('name'))
          sys.exit(0 if success else 1)

  release:
    description: Convert Unreleased to versioned release
    arguments:
      version:
        required: true
        description: Version number (e.g., 1.0.0)
    flags:
      date:
        type: string
        description: Release date (defaults to today)
    
    execute:
      - python: |
          from changelog_core import release_version
          
          success = release_version(
              arguments['version'],
              flags.get('date')
          )
          sys.exit(0 if success else 1)

  validate:
    description: Validate CHANGELOG.md format
    
    execute:
      - python: |
          from changelog_core import validate_changelog
          
          success = validate_changelog()
          sys.exit(0 if success else 1)

  show:
    description: Display current CHANGELOG.md
    flags:
      unreleased:
        type: bool
        description: Show only unreleased changes
      latest:
        type: bool
        description: Show only latest version
    
    execute:
      - python: |
          from pathlib import Path
          
          changelog = Path('CHANGELOG.md')
          if not changelog.exists():
              print("ERROR: CHANGELOG.md not found", file=sys.stderr)
              print("   Run: ry changelog init", file=sys.stderr)
              sys.exit(1)
          
          with open(changelog) as f:
              content = f.read()
          
          if flags.get('unreleased'):
              # Extract unreleased section
              lines = content.split('\n')
              in_unreleased = False
              for line in lines:
                  if line.strip() == '## [Unreleased]':
                      in_unreleased = True
                      print(line)
                  elif in_unreleased:
                      if line.startswith('## ['):
                          break
                      print(line)
          elif flags.get('latest'):
              # Extract latest version
              lines = content.split('\n')
              in_version = False
              for line in lines:
                  if line.startswith('## [') and 'Unreleased' not in line:
                      in_version = True
                      print(line)
                  elif in_version:
                      if line.startswith('## ['):
                          break
                      print(line)
          else:
              print(content)

default:
  execute:
    - python: |
        print("changelog - Simple changelog initialization and release management", file=sys.stderr)
        print("Version: 0.1.0", file=sys.stderr)
        print("Type: utility", file=sys.stderr)
        print("", file=sys.stderr)
        print("Commands:", file=sys.stderr)
        print("  init        Initialize a new CHANGELOG.md", file=sys.stderr)
        print("  release     Convert Unreleased to versioned release", file=sys.stderr)
        print("  validate    Validate CHANGELOG.md format", file=sys.stderr)
        print("  show        Display current CHANGELOG.md", file=sys.stderr)
        print("", file=sys.stderr)
        print("Common workflow:", file=sys.stderr)
        print("  ry changelog init                   # Create CHANGELOG.md", file=sys.stderr)
        print("  ry changelog show --unreleased      # View pending changes", file=sys.stderr)
        print("  ry changelog release 1.0.0          # Convert Unreleased to version", file=sys.stderr)
        print("  ry changelog validate               # Check format", file=sys.stderr)