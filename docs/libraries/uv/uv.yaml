# uv.yaml - Enhanced uv operations with git integration
# Usage: ry libraries/uv/uv.yaml <command> [args...]

match:
  "version --bump":
    # Bump workflow - version will definitely change
    - shell: |
        # Pre-flight checks
        if [ -n "$({{env.RY_GIT|/usr/bin/git}} status --porcelain)" ]; then
            echo "ERROR: Working directory not clean" >&2
            echo "  Commit or stash changes first" >&2
            exit 1
        fi
        
        if [ ! -f "CHANGELOG.md" ]; then
            echo "ERROR: No CHANGELOG.md found" >&2
            echo "  Run: ry changelog init" >&2
            echo "  Then update the [Unreleased] section with your changes" >&2
            exit 1
        fi
    
    # Get current state
    - shell: "{{env.RY_UV|/usr/bin/uv}} version --output-format json"
      capture: OLD_INFO
    
    # Execute the bump
    - shell: "{{env.RY_UV|/usr/bin/uv}} {{args.all}}"
      capture: UV_OUTPUT
    
    # Get new state
    - shell: "{{env.RY_UV|/usr/bin/uv}} version --output-format json"
      capture: NEW_INFO
    
    # Process the change
    - shell: |
        # Extract version info
        OLD_VERSION=$(echo "$OLD_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin)['version'])")
        NEW_VERSION=$(echo "$NEW_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin)['version'])")
        PACKAGE_NAME=$(echo "$NEW_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin)['package_name'])")
        
        # Update changelog if ry is available
        if [ -f "CHANGELOG.md" ] && command -v ry >/dev/null; then
            ry changelog update "$NEW_VERSION" 2>/dev/null || true
        fi
        
        # Sync dependencies
        echo "INFO: Syncing dependencies..." >&2
        {{env.RY_UV|/usr/bin/uv}} sync --quiet
        
        # Git operations
        {{env.RY_GIT|/usr/bin/git}} add -A
        {{env.RY_GIT|/usr/bin/git}} commit -m "chore(${PACKAGE_NAME}): bump version from ${OLD_VERSION} to ${NEW_VERSION}"
        
        # Tag with package name
        TAG_NAME="${PACKAGE_NAME}-v${NEW_VERSION}"
        {{env.RY_GIT|/usr/bin/git}} tag "${TAG_NAME}" -m "Release ${PACKAGE_NAME} v${NEW_VERSION}"
        
        # Success feedback
        echo "SUCCESS: Bumped ${PACKAGE_NAME}: ${OLD_VERSION} → ${NEW_VERSION}" >&2
        echo "SUCCESS: Created tag: ${TAG_NAME}" >&2
        echo "" >&2
        echo "Next steps:" >&2
        echo "  git push origin main" >&2
        echo "  git push origin ${TAG_NAME}" >&2
        
        # Show original uv output
        echo "$UV_OUTPUT"

  version:
    # Handle both "version" (show) and "version X.Y.Z" (set)
    - shell: |
        # Check if we're setting a version (have additional args)
        if [ $# -gt 1 ]; then
            # Setting version - need git workflow
            
            # Pre-flight checks
            if [ -n "$({{env.RY_GIT|/usr/bin/git}} status --porcelain)" ]; then
                echo "ERROR: Working directory not clean" >&2
                echo "  Commit or stash changes first" >&2
                exit 1
            fi
            
            # Get current version
            OLD_INFO=$({{env.RY_UV|/usr/bin/uv}} version --output-format json)
            OLD_VERSION=$(echo "$OLD_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin)['version'])")
            
            # Set new version
            UV_OUTPUT=$({{env.RY_UV|/usr/bin/uv}} {{args.all}})
            
            # Get new version
            NEW_INFO=$({{env.RY_UV|/usr/bin/uv}} version --output-format json)
            NEW_VERSION=$(echo "$NEW_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin)['version'])")
            PACKAGE_NAME=$(echo "$NEW_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin)['package_name'])")
            
            # If version didn't change, just show output
            if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
                echo "$UV_OUTPUT"
                exit 0
            fi
            
            # Version changed - do git workflow
            echo "INFO: Version changed from ${OLD_VERSION} to ${NEW_VERSION}" >&2
            
            # Update changelog if available
            if [ -f "CHANGELOG.md" ] && command -v ry >/dev/null; then
                echo "INFO: Updating CHANGELOG.md..." >&2
                ry changelog update "$NEW_VERSION" 2>/dev/null || true
            fi
            
            # Sync dependencies
            echo "INFO: Syncing dependencies..." >&2
            {{env.RY_UV|/usr/bin/uv}} sync --quiet
            
            # Git operations
            {{env.RY_GIT|/usr/bin/git}} add -A
            
            # Appropriate commit message
            if [ "$OLD_VERSION" = "0.0.0" ] || [ -z "$({{env.RY_GIT|/usr/bin/git}} tag -l)" ]; then
                {{env.RY_GIT|/usr/bin/git}} commit -m "chore(${PACKAGE_NAME}): initial version ${NEW_VERSION}"
            else
                {{env.RY_GIT|/usr/bin/git}} commit -m "chore(${PACKAGE_NAME}): set version from ${OLD_VERSION} to ${NEW_VERSION}"
            fi
            
            # Tag with package name
            TAG_NAME="${PACKAGE_NAME}-v${NEW_VERSION}"
            {{env.RY_GIT|/usr/bin/git}} tag "${TAG_NAME}" -m "Release ${PACKAGE_NAME} v${NEW_VERSION}"
            
            echo "SUCCESS: Set ${PACKAGE_NAME}: ${OLD_VERSION} → ${NEW_VERSION}" >&2
            echo "SUCCESS: Created tag: ${TAG_NAME}" >&2
            echo "" >&2
            echo "Next steps:" >&2
            echo "  git push origin main" >&2
            echo "  git push origin ${TAG_NAME}" >&2
            
            # Show original output
            echo "$UV_OUTPUT"
        else
            # Just showing version
            {{env.RY_UV|/usr/bin/uv}} version {{args.all|}}
        fi
  
  publish:
    # Pre-flight check for tagged version
    - python: |
        import sys
        import subprocess
        import json
        
        # Get current version info
        result = subprocess.run(
            ["{{env.RY_UV|/usr/bin/uv}}", "version", "--output-format", "json"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            data = json.loads(result.stdout)
            version = data['version']
            package = data['package_name']
            tag = f"{package}-v{version}"
            
            # Check if tag exists
            tag_check = subprocess.run(
                ["{{env.RY_GIT|/usr/bin/git}}", "tag", "-l", tag],
                capture_output=True,
                text=True
            )
            
            if not tag_check.stdout.strip():
                print(f"ERROR: Version {version} is not tagged", file=sys.stderr)
                print(f"  Expected tag: {tag}", file=sys.stderr)
                print(f"  Run: ry uv version --bump patch", file=sys.stderr)
                sys.exit(1)
            
            print(f"INFO: Version {version} is properly tagged", file=sys.stderr)
    
    # Run the actual publish
    - shell: "{{env.RY_UV|/usr/bin/uv}} {{args.all}}"
  
  build:
    # Clean and build
    - shell: |
        if [ -d "dist" ]; then
            echo "INFO: Cleaning dist/ directory..." >&2
            rm -rf dist/*
        fi
        
        echo "INFO: Building package..." >&2
        {{env.RY_UV|/usr/bin/uv}} {{args.all}}
  
  # Pass through all other commands unchanged
  default:
    - shell: "{{env.RY_UV|/usr/bin/uv}} {{args.all}}"