version: "2.0"
name: ry-lib
type: utility
description: Library development and management for ry-next

commands:
  init:
    description: Initialize a new ry-next library
    arguments:
      name: required
    flags:
      type:
        type: enum
        values: [augmentation, utility, hybrid]
        default: utility
      target:
        type: string
        description: Target binary for augmentation libraries
    
    execute:
      - python: |
          import sys
          import os
          sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
          from create_library import create_library
          
          success = create_library(
              arguments['name'],
              flags.get('type', 'utility'),
              flags.get('target', '')
          )
          sys.exit(0 if success else 1)

  validate:
    description: Validate library structure and content
    flags:
      library:
        type: string
        description: Specific library to validate
      all:
        type: bool
        description: Validate all libraries
      verbose:
        type: bool
        description: Show detailed information
    
    handlers:
      - when: flags.library
        execute:
          - python: |
              import sys
              import os
              sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
              from validate_library import validate_library
              
              success = validate_library(flags['library'], flags.get('verbose', False))
              sys.exit(0 if success else 1)
      
      - when: flags.all
        execute:
          - python: |
              import sys
              import os
              sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
              from validate_library import validate_all
              
              success = validate_all(flags.get('verbose', False))
              sys.exit(0 if success else 1)
      
      - default:
        error: "Specify --library NAME or --all"

  bump:
    description: Bump library version
    arguments:
      library: required
    flags:
      type:
        type: enum
        values: [major, minor, patch]
        default: patch
      message:
        type: string
        description: Changelog entry message
    
    execute:
      - python: |
          import sys
          import os
          sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
          from version_manager import bump_version
          
          success = bump_version(
              arguments['library'],
              flags.get('type', 'patch'),
              flags.get('message', '')
          )
          sys.exit(0 if success else 1)

  list:
    description: List available libraries
    flags:
      json:
        type: bool
        description: Output as JSON
      installed:
        type: bool
        description: Show only installed libraries
    
    execute:
      - python: |
          import sys
          import os
          sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
          from registry_builder import list_libraries
          
          success = list_libraries(
              flags.get('json', False),
              flags.get('installed', False)
          )
          sys.exit(0 if success else 1)

  check-versions:
    description: Check if changed libraries have version bumps
    flags:
      hook:
        type: bool
        description: Show git hook setup instructions
    
    execute:
      - python: |
          import sys
          import os
          
          if flags.get('hook'):
              print("# Add to .git/hooks/pre-commit:")
              print("#!/bin/bash")
              print("ry-next ry-lib check-versions || exit 1")
              sys.exit(0)
          
          sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
          from version_manager import check_version_changes
          
          success = check_version_changes()
          sys.exit(0 if success else 1)

  registry:
    description: Generate registry.json for all libraries
    flags:
      output:
        type: string
        default: docs_next/libraries/registry.json
        description: Output file path
      pretty:
        type: bool
        description: Pretty print JSON
    
    execute:
      - python: |
          import sys
          import os
          sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
          from registry_builder import build_registry
          
          success = build_registry(
              flags.get('output'),
              flags.get('pretty', False)
          )
          sys.exit(0 if success else 1)

  publish:
    description: Update registry and commit changes
    flags:
      message:
        type: string
        default: "chore: update library registry"
        description: Commit message
      push:
        type: bool
        description: Also push to remote
    
    execute:
      - shell: |
          echo "üìã Updating registry..."
      
      - python: |
          import sys
          import os
          sys.path.insert(0, os.path.join(env['RY_LIBRARY_DIR'], 'lib'))
          from registry_builder import build_registry
          
          if not build_registry(pretty=True):
              sys.exit(1)
      
      - shell: |
          cd "$(/usr/bin/git rev-parse --show-toplevel)" || exit 1
          
          if ! /usr/bin/git diff --quiet docs_next/libraries/; then
              /usr/bin/git add docs_next/libraries/
              /usr/bin/git commit -m "{{flags.message}}"
              echo "‚úÖ Committed changes"
              
              if [ "{{flags.push}}" = "True" ]; then
                  /usr/bin/git push
                  echo "üì§ Pushed to remote"
              fi
          else
              echo "‚ÑπÔ∏è  No changes to publish"
          fi