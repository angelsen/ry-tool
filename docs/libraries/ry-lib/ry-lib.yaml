version: "2.0"
name: ry-lib
type: utility
description: Library development and management for ry-next

workflows:
  - "ry-next ry-lib init my-lib --type utility     # Create utility library"
  - "ry-next ry-lib init my-git --type augmentation --target /usr/bin/git  # Augment git"
  - "ry-next ry-lib validate --all                 # Validate all libraries"
  - "ry-next ry-lib project init                   # Create project.yaml"
  - "ry-next ry-lib bump my-lib --type patch       # Bump library version"

commands:
  init:
    description: Create a new library (utility or augmentation type)
    arguments:
      name: required
    flags:
      type:
        type: enum
        values: [augmentation, utility, hybrid]
        default: utility
        description: "Library type - utility: standalone commands, augmentation: wraps/enhances existing CLI tool"
      target:
        type: string
        description: Target binary path for augmentation libraries (e.g., /usr/bin/git)
    
    execute:
      - python: |
          from create_library import create_library
          
          success = create_library(
              arguments['name'],
              flags.get('type', 'utility'),
              flags.get('target', '')
          )
          sys.exit(0 if success else 1)

  validate:
    description: Validate library structure and content
    flags:
      library:
        type: string
        description: Specific library to validate
      all:
        type: bool
        description: Validate all libraries
      verbose:
        type: bool
        description: Show detailed information
    
    handlers:
      - when: flags.library
        execute:
          - python: |
              from validate_library import validate_library
              
              success = validate_library(flags['library'], flags.get('verbose', False))
              sys.exit(0 if success else 1)
      
      - when: flags.all
        execute:
          - python: |
              from validate_library import validate_all
              
              success = validate_all(flags.get('verbose', False))
              sys.exit(0 if success else 1)
      
      - default:
        error: "Specify --library NAME or --all"

  bump:
    description: Bump library version
    arguments:
      library: required
    flags:
      type:
        type: enum
        values: [major, minor, patch]
        default: patch
      message:
        type: string
        description: Changelog entry message
    
    execute:
      - python: |
          from version_manager import bump_version
          
          success = bump_version(
              arguments['library'],
              flags.get('type', 'patch'),
              flags.get('message', '')
          )
          sys.exit(0 if success else 1)

  list:
    description: List available libraries
    flags:
      json:
        type: bool
        description: Output as JSON
      installed:
        type: bool
        description: Show only installed libraries
    
    execute:
      - python: |
          from registry_builder import list_libraries
          
          success = list_libraries(
              flags.get('json', False),
              flags.get('installed', False)
          )
          sys.exit(0 if success else 1)

  check-versions:
    description: Check if changed libraries have version bumps
    flags:
      hook:
        type: bool
        description: Show git hook setup instructions
    
    execute:
      - python: |
          if flags.get('hook'):
              print("# Add to .git/hooks/pre-commit:")
              print("#!/bin/bash")
              print("ry-next ry-lib check-versions || exit 1")
              sys.exit(0)
          
          from version_manager import check_version_changes
          
          success = check_version_changes()
          sys.exit(0 if success else 1)

  registry:
    description: Generate registry.json for all libraries
    flags:
      output:
        type: string
        default: docs_next/libraries/registry.json
        description: Output file path
      pretty:
        type: bool
        description: Pretty print JSON
    
    execute:
      - python: |
          from registry_builder import build_registry
          
          success = build_registry(
              flags.get('output'),
              flags.get('pretty', False)
          )
          sys.exit(0 if success else 1)

  publish:
    description: Update registry and commit changes
    flags:
      message:
        type: string
        default: "chore: update library registry"
        description: Commit message
      push:
        type: bool
        description: Also push to remote
    
    execute:
      - shell: |
          echo "BUILD: Updating registry..." >&2
      
      - python: |
          from registry_builder import build_registry
          
          if not build_registry(pretty=True):
              sys.exit(1)
      
      - shell: |
          cd "$(/usr/bin/git rev-parse --show-toplevel)" || exit 1
          
          if ! /usr/bin/git diff --quiet docs_next/libraries/; then
              /usr/bin/git add docs_next/libraries/
              /usr/bin/git commit -m "{{flags.message}}"
              echo "SUCCESS: Committed changes" >&2
              
              if [ "{{flags.push}}" = "True" ]; then
                  /usr/bin/git push
                  echo "SUCCESS: Pushed to remote" >&2
              fi
          else
              echo "INFO: No changes to publish" >&2
          fi

  project:
    description: Manage project.yaml manifest
    arguments:
      action:
        type: enum
        values: [init, sync, validate, show]
        required: true
        description: Action to perform
    
    handlers:
      - when: "arguments.get('action') == 'init'"
        execute:
          - python: |
              from pathlib import Path
              from project_manager import ProjectManager
              
              # Check if already exists
              if Path('project.yaml').exists() and not flags.get('force'):
                  print("ERROR: project.yaml already exists", file=sys.stderr)
                  print("   Use --force to overwrite", file=sys.stderr)
                  sys.exit(1)
              
              pm = ProjectManager()
              if pm.init_project(force=flags.get('force', False)):
                  print("SUCCESS: Created project.yaml", file=sys.stderr)
                  print("INFO: Next steps:", file=sys.stderr)
                  print("   1. Edit to customize metadata", file=sys.stderr)
                  print("   2. ry-next site-builder build", file=sys.stderr)
              else:
                  sys.exit(1)
      
      - when: "arguments.get('action') == 'sync'"
        execute:
          - python: |
              from pathlib import Path
              from project_manager import ProjectManager
              
              if not Path('project.yaml').exists():
                  print("ERROR: project.yaml not found", file=sys.stderr)
                  print("   Run: ry-next ry-lib project init", file=sys.stderr)
                  sys.exit(1)
              
              pm = ProjectManager()
              try:
                  changes = pm.sync_project()
                  if changes:
                      for change in changes:
                          print(f"UPDATE: {change}", file=sys.stderr)
                      print("SUCCESS: project.yaml updated", file=sys.stderr)
                  else:
                      print("INFO: project.yaml is up to date", file=sys.stderr)
              except Exception as e:
                  print(f"ERROR: {e}", file=sys.stderr)
                  sys.exit(1)
      
      - when: "arguments.get('action') == 'validate'"
        execute:
          - python: |
              from pathlib import Path
              from project_manager import ProjectManager
              
              if not Path('project.yaml').exists():
                  print("ERROR: project.yaml not found", file=sys.stderr)
                  print("   Run: ry-next ry-lib project init", file=sys.stderr)
                  sys.exit(1)
              
              pm = ProjectManager()
              valid, errors = pm.validate_project()
              if valid:
                  print("SUCCESS: project.yaml is valid", file=sys.stderr)
              else:
                  for error in errors:
                      print(f"ERROR: {error}", file=sys.stderr)
                  sys.exit(1)
      
      - when: "arguments.get('action') == 'show'"
        execute:
          - python: |
              from pathlib import Path
              from project_manager import ProjectManager
              
              if not Path('project.yaml').exists():
                  print("ERROR: project.yaml not found", file=sys.stderr)
                  print("   Run: ry-next ry-lib project init", file=sys.stderr)
                  sys.exit(1)
              
              pm = ProjectManager()
              try:
                  project = pm.show_project()
                  print(yaml.dump(project, default_flow_style=False, sort_keys=False))
              except Exception as e:
                  print(f"ERROR: {e}", file=sys.stderr)
                  sys.exit(1)