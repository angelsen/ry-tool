# ry - YAML Command Orchestrator

## Overview
Tool augmentation system via YAML-to-shell command generation. Never executes, only generates commands for piping. Core philosophy: "Augment, don't replace."

## Key Concepts
- YAML structures: steps, pipeline, parallel, match
- Templates: {{var|default}} syntax (double braces)
- Executors: python, shell (easily extensible)
- Output: Always generates shell commands to stdout

## Architecture
- loader.py: YAML with dynamic tags (!env, !shell, !if, !eval, !include)
- generator.py: Orchestrates transformation
- normalizer.py: YAML â†’ canonical {"executor": "python", "script": "..."}
- template.py: {{var|default}} substitution
- executors/: Language-specific compilation (python -c, sh -c)
- packages/: Library management (install, registry, dependencies)

## Usage Examples
```bash
# Direct usage
ry config.yaml | sh           # Execute
ry config.yaml arg1 arg2      # With arguments
ry config.yaml > script.sh    # Save commands

# Library usage (after installation)
ry --install git              # Install library
git commit -m "feat: new"     # Use augmented command
ry git status                 # Or call via ry
```

## YAML Examples
```yaml
# Sequential
steps:
  - python: print("hello")
  - shell: echo "world"

# Pipeline (piped)
pipeline:
  - shell: echo "data"
  - python: |
      import sys
      print(sys.stdin.read().upper())

# Pattern matching
match:
  test: 
    - shell: pytest
  default:
    - shell: echo "Unknown command"
```

## Templates
- {{args.0|default}} - Arguments with defaults
- {{env.VAR}} - Environment variables
- Single braces {} work normally in Python/JS

## Extension
Add executor in ~10 lines:
```python
class RubyExecutor(Executor):
    name = "ruby"
    def compile(self, script, config=None):
        return f"ruby -e {shlex.quote(script)}"
```

## Libraries
Located in docs/libraries/, each library contains:
- library.yaml: Main command definitions with match patterns
- meta.yaml: Metadata (name, version, author, dependencies)
- lib/: Helper scripts (Python/shell)
- README.md, CHANGELOG.md: Documentation

Augmentation libraries (git, uv): Use {{env.RY_TOOL|/usr/bin/tool}} pattern
Utility libraries (changelog, ry-lib): Direct tool invocation

## Design Rules
- Single responsibility per file
- No execution, only generation
- Use shlex.quote() for safe escaping
- Templates use {{}} to avoid conflicts
- Libraries use /usr/bin/tool to prevent recursion
- Augmentation allows bypass via environment variables